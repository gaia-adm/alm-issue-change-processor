'use strict';

var xml2js = require("xml2js");
var parser = xml2js.parseString;

var params = getProcessParameters();

exitOnSignal('SIGTERM');

var logLevelsMap = {
    'DEBUG': 1, 'INFO': 2, 'WARNING': 3, 'ERROR': 4, 'CRITICAL': 5
};

if (Object.keys(params).length > 0) {
    // custom metadata keys are prefixed with C_
    console.error(' LOCATION: ' + params.C_ALM_LOCATION);
    console.error(' DOMAIN: ' + params.C_DOMAIN);
    console.error(' PROJECT: ' + params.C_PROJECT);
} else {
    console.log('[]');
    process.exit(0);
}

readInputStream(parseXml);

function parseXml (data){
    console.error(' Start parsing alm-issue-change XML');
    parser(data, function(err, result){

        var issue_change = [];
        var elements = result.Audits.Audit.length;
        for(var i = 0; i< elements; i++) {
            var auditEvent = {};
            auditEvent.event = "issue_change";
            //data timestamp is in UTC already, just should be adjusted with ISO-8601
            auditEvent.time = new Date(result.Audits.Audit[i].Time[0]).toISOString();
            //set ID section
            var id = {};
            id.uid =  result.Audits.Audit[i].ParentId[0];
            id.auditId = result.Audits.Audit[i].Id[0];
            auditEvent.id = id;
            //set tags, which are not from metadata
            var tags = {};
            tags.User = result.Audits.Audit[i].User[0];
            tags.Action = result.Audits.Audit[i].Action[0];
            auditEvent.tags = tags;
            var source = {};
            source.Location = params.C_ALM_LOCATION;
            source.Domain = params.C_DOMAIN;
            source.Project = params.C_PROJECT;
            auditEvent.source = source;
            var fi = [];
            //the entire array of Properties, expecting to have length = 1 always
            for(var j = 0; j < result.Audits.Audit[i].Properties.length ; j++){
                fi.push(createFieldFromProperty(result.Audits.Audit[i].Properties[j]));
            }
            auditEvent.fields = fi[0];

            issue_change.push(auditEvent);
        }
        log('INFO', 'processor.js', 'ALM issue change payload to be sent to metrics-gateway-service; size in characters: ' + JSON.stringify(issue_change).length);
        log('DEBUG', 'processor.js', 'ALM issue change payload to be sent to metrics-gateway-service: ' + JSON.stringify(issue_change));
        //use process stdout via console.log to send the result to result-processing (parent process)
        console.log(JSON.stringify(issue_change));
        process.exit(0);
    });
}

/**
 * Create json array from properties object generated by xml parser
 * All properties handled in 1 call of this function
 * Also property names are set according to https://github.com/gaia-adm/api-data-format
 */

var createFieldFromProperty = function createFieldFromProperty(prop){
    var fields = [];

    for(var p = 0; p < prop.Property.length; p++){
        var field = {};

        field.label = setIfNotEmpty(prop.Property[p].$.Label);
        field.name = setIfNotEmpty(prop.Property[p].$.Name);
        //oldValue can be empty in case of new entity
        if(prop.Property[p].OldValue) {
            field.from = setIfNotEmpty(prop.Property[p].OldValue[0]);
        }
        field.to = setIfNotEmpty(prop.Property[p].NewValue[0]);
        fields.push(field);
    }
    return fields;
};

var setIfNotEmpty = function setIfNotEmpty(val) {
    if(val) {
        return val;
    }
};

function exitOnSignal(signal) {
    process.on(signal, function() {
        console.error(' Caught ' + signal + ', exiting');
        process.exit(1);
    });
}

function getProcessParameters() {
    var params = {};
    var keys = Object.keys(process.env);
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.lastIndexOf('P_', 0) === 0) {
            var value = process.env[key];
            params[key.substr(2)] = value;
        }
    }
    return params;
}

function readInputStream(callback) {
    console.error(' Input stream received, start reading');
    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', function () {
        var chunk = process.stdin.read();
        if (chunk !== null) {
            log('INFO', 'processor.js', 'XML created from the input stream; size in characters: ' + chunk.length);
            log('DEBUG', 'processor.js', 'XML created from the input stream' + chunk);
            callback(chunk);
        }
    });
}

function log(level, location, message) {
    var logLevel = logLevelsMap[level];
    var configuredLogLevel = logLevelsMap[process.env.P_LOG_LEVEL || 'DEBUG'];
    if (logLevel >= configuredLogLevel) {
        console.error(level + ':' + location + ':' + message);
    }
}

module.exports.setIfNotEmpty = setIfNotEmpty;
module.exports.createFieldFromProperty = createFieldFromProperty;
